<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>听雨~昨夜卧听风吹雨，不若相忘于江湖。</title>
	<atom:link href="http://cssor.com/feed" rel="self" type="application/rss+xml" />
	<link>http://cssor.com</link>
	<description>JAVA入道，却更擅长于WEB前端技术，最喜欢jQuery库，还喜欢学设计，风格简约·简洁·清整。爱好古中国文化，崇尚老庄自然自由之道。不喜欢规划，也不喜欢计划，因为赶不上变化。却喜欢打有准备的仗，谋定而后动，不是计划，谓之计谋矣。</description>
	<lastBuildDate>Mon, 13 Oct 2014 04:19:09 +0000</lastBuildDate>
	<language>zh-CN</language>
		<sy:updatePeriod>hourly</sy:updatePeriod>
		<sy:updateFrequency>1</sy:updateFrequency>
	<generator>http://wordpress.org/?v=3.9.2</generator>
	<item>
		<title>F.lux调色护眼</title>
		<link>http://cssor.com/f-lux.html</link>
		<comments>http://cssor.com/f-lux.html#comments</comments>
		<pubDate>Mon, 13 Oct 2014 04:19:09 +0000</pubDate>
		<dc:creator><![CDATA[ToFishes]]></dc:creator>
				<category><![CDATA[自然]]></category>
		<category><![CDATA[护眼]]></category>

		<guid isPermaLink="false">http://cssor.com/?p=1267</guid>
		<description><![CDATA[长期对着电脑，眼睛是真心累。得知一个软件叫F.lux，可以调节屏幕色，有一定的缓 ...]]></description>
				<content:encoded><![CDATA[<p>长期对着电脑，眼睛是真心累。得知一个软件叫F.lux，可以调节屏幕色，有一定的缓解效果，不如试试，官网地址下载：https://justgetflux.com</p>
]]></content:encoded>
			<wfw:commentRss>http://cssor.com/f-lux.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Mac osx保存和恢复tmux会话</title>
		<link>http://cssor.com/save-and-restore-tmux-session-for-computer-reboot.html</link>
		<comments>http://cssor.com/save-and-restore-tmux-session-for-computer-reboot.html#comments</comments>
		<pubDate>Sun, 28 Sep 2014 04:29:17 +0000</pubDate>
		<dc:creator><![CDATA[ToFishes]]></dc:creator>
				<category><![CDATA[linux]]></category>
		<category><![CDATA[tmux session]]></category>

		<guid isPermaLink="false">http://cssor.com/?p=1257</guid>
		<description><![CDATA[系统重启，tmux会话就会丢失，需要重开tmux，不爽，于是去问Google大神 ...]]></description>
				<content:encoded><![CDATA[<p>系统重启，tmux会话就会丢失，需要重开tmux，不爽，于是去问Google大神怎么办，得到一个手动保存和恢复的方法。源于：http://superuser.com/a/615716</p>
<p>该方法作者在他的<a href="https://github.com/mislav/dotfiles" target="_blank">github库</a>中提供了很多脚本，我只取相关的<a href="#tmux-session-script">tmux-seesion</a>脚本拿来用用，具体使用方法如下：</p>
<p><span id="more-1257"></span></p>
<p>1、设立一个用户专用的命令目录，比如我的是 /Users/cssor/bin，将该目录加入系统环境变量，并设置可执行权限</p>
<pre>
#将下面的语句加入到 ~/.bash_profile (使用zsh的，则为 ~/.zshrc)
export PATH=$PATH:/Users/cssor/bin
</pre>
<pre>
#设置可执行权限
chmod -R +x /User/cssor/bin
</pre>
<p>2、保存脚本到该目录，文件名为 tmux-session，完整路径为 /Users/cssor/bin/tmux-session。脚本内容如下</p>
<pre>
#!/usr/bin/env bash
# Save and restore the state of tmux sessions and windows.
# TODO: persist and restore the state &#038; position of panes.
set -e

dump() {
  local d=$'\t'
  tmux list-windows -a -F "#S${d}#W${d}#{pane_current_path}"
}

save() {
  dump > ~/.tmux-session
}

terminal_size() {
  stty size 2>/dev/null | awk '{ printf "-x%d -y%d", $2, $1 }'
}

session_exists() {
  tmux has-session -t "$1" 2>/dev/null
}

add_window() {
  tmux new-window -d -t "$1:" -n "$2" -c "$3"
}

new_session() {
  cd "$3" &#038;&#038;
  tmux new-session -d -s "$1" -n "$2" $4
}

restore() {
  tmux start-server
  local count=0
  local dimensions="$(terminal_size)"

  while IFS=$'\t' read session_name window_name dir; do
    if [[ -d "$dir" &#038;&#038; $window_name != "log" &#038;&#038; $window_name != "man" ]]; then
      if session_exists "$session_name"; then
        add_window "$session_name" "$window_name" "$dir"
      else
        new_session "$session_name" "$window_name" "$dir" "$dimensions"
        count=$(( count + 1 ))
      fi
    fi
  done < ~/.tmux-session

  echo "restored $count sessions"
}

case "$1" in
save | restore )
  $1
  ;;
* )
  echo "valid commands: save, restore" >&#038;2
  exit 1
esac
</pre>
<p>原链接获取：https://github.com/mislav/dotfiles/blob/d2af5900fce38238d1202aa43e7332b20add6205/bin/tmux-session</p>
<p>3、保存和恢复会话的使用方式：</p>
<pre>
#会话信息会保存到 ~/.tmux-session
#手动保存可能会遗忘，可以加入cron定时任务自动保存
tmux-session save
#系统重启后，恢复：
tmux-session restore
</pre>
<p>4、设置定时任务自动保存会话信息</p>
<pre>
#编辑定时任务
crontab -e
</pre>
<p>在打开的编辑器（一般是vim）中，输入：</p>
<pre>
#表示每59分钟执行一次，可按自己的习惯改为 0-59 之间的数字，更多用法需自行学习crontab
59 * * * * tmux-session save
</pre>
<p>保存后退出，看见 crontab: installing new crontab 即表示成功。<br />
我使用的时候，默认编辑器是vi，返回错误： crontab: &#8220;/usr/bin/vi&#8221; exited with status 1.<br />
这是据说因为vi编辑的不行，vim却可以（==! 一群乌鸦从脑袋上飞过~）。<br />
执行 export EDITOR=vim 可以修正这个问题，或尝试 export EDITOR=nano.<br />
查看成功的任务： crontab -l</p>
<p>资料： <a href="http://cssor.com/ubuntu-linux-planning-task-establishment-use-crontab-e.html" title="Linux下的计划任务设置">关于crontab</a></p>
]]></content:encoded>
			<wfw:commentRss>http://cssor.com/save-and-restore-tmux-session-for-computer-reboot.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>关于Google协议SPDY</title>
		<link>http://cssor.com/google-spdy.html</link>
		<comments>http://cssor.com/google-spdy.html#comments</comments>
		<pubDate>Thu, 25 Sep 2014 07:20:47 +0000</pubDate>
		<dc:creator><![CDATA[ToFishes]]></dc:creator>
				<category><![CDATA[服务器]]></category>
		<category><![CDATA[spdy]]></category>

		<guid isPermaLink="false">http://cssor.com/?p=1255</guid>
		<description><![CDATA[发音： speedy 在线检测： http://spdycheck.org/ 配 ...]]></description>
				<content:encoded><![CDATA[<p>发音： speedy<br />
在线检测： http://spdycheck.org/<br />
配置方法：<br />
http://www.nginxtips.com/how-to-install-and-configure-spdy-on-nginx/<br />http://centminmod.com/nginx_configure_https_ssl_spdy.html<br />
SSL证书：http://www.startssl.com/<br />http://www.startssl.com/?app=42</p>
]]></content:encoded>
			<wfw:commentRss>http://cssor.com/google-spdy.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Mac下配置iterm2和oh-my-zsh</title>
		<link>http://cssor.com/mac-osx-config-theme-for-iterm2-oh-my-zsh.html</link>
		<comments>http://cssor.com/mac-osx-config-theme-for-iterm2-oh-my-zsh.html#comments</comments>
		<pubDate>Fri, 19 Sep 2014 09:45:43 +0000</pubDate>
		<dc:creator><![CDATA[ToFishes]]></dc:creator>
				<category><![CDATA[linux]]></category>
		<category><![CDATA[iterm2]]></category>
		<category><![CDATA[zsh]]></category>

		<guid isPermaLink="false">http://cssor.com/?p=1248</guid>
		<description><![CDATA[晒个图先： 首先安装oh-my-zsh，参照官网方法： curl -L http ...]]></description>
				<content:encoded><![CDATA[<p>晒个图先：</p>
<p><a href="http://cssor.com/wp-content/uploads/2014/09/iterm2-theme.png"><img class="aligncenter size-medium wp-image-1249" src="http://cssor.com/wp-content/uploads/2014/09/iterm2-theme-300x187.png" alt="iterm2-theme" width="300" height="187" /></a><br />
<span id="more-1248"></span></p>
<p>首先安装oh-my-zsh，参照<a href="http://ohmyz.sh" target="_blank">官网</a>方法：</p>
<pre>curl -L http://install.ohmyz.sh | sh
</pre>
<p>或者：</p>
<pre>wget --no-check-certificate http://install.ohmyz.sh -O - | sh
</pre>
<p>然后按照<a href="https://raw.githubusercontent.com/tofishes/iterm2-zsh/master/_zshrc" target="_blank">https://raw.githubusercontent.com/tofishes/iterm2-zsh/master/_zshrc</a>文件内容来配置zsh：</p>
<pre>vi ~/.zshrc
#参照上述链接内容来做修改，主题用nebirhos
</pre>
<p>接下来去<a href="http://iterm2.com" target="_blank">官网下载Iterm2</a>.<br />
安装Iterm完毕，启动后进入设置窗口，导入配色主题（<a href="https://raw.githubusercontent.com/tofishes/iterm2-zsh/master/Monokai-Soda.itermcolors" target="_blank">点此下载配置主题Monokai-Soda.itermcolors</a>）：<br />
<a href="http://cssor.com/wp-content/uploads/2014/09/iterm2-theme-setting.png"><img class="aligncenter size-medium wp-image-1250" src="http://cssor.com/wp-content/uploads/2014/09/iterm2-theme-setting-300x187.png" alt="iterm2-theme-setting" width="300" height="187" /></a></p>
<p>同样的配置窗口，切换到window项，配置背景图（<a href="https://github.com/tofishes/iterm2-zsh/blob/master/calligraphy05.jpg" target="_blank">点此下载背景图</a>）：<br />
<a href="http://cssor.com/wp-content/uploads/2014/09/iterm2-background.jpg"><img class="aligncenter size-full wp-image-1251" src="http://cssor.com/wp-content/uploads/2014/09/iterm2-background.jpg" alt="iterm2-background" width="924" height="541" /></a></p>
<p>ok,结束。</p>
<p>打包资源： https://github.com/tofishes/iterm2-zsh</p>
]]></content:encoded>
			<wfw:commentRss>http://cssor.com/mac-osx-config-theme-for-iterm2-oh-my-zsh.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>配置Mac os终端下vi的配色</title>
		<link>http://cssor.com/mac-osx-vi-vim-colors.html</link>
		<comments>http://cssor.com/mac-osx-vi-vim-colors.html#comments</comments>
		<pubDate>Thu, 18 Sep 2014 08:16:41 +0000</pubDate>
		<dc:creator><![CDATA[ToFishes]]></dc:creator>
				<category><![CDATA[vim]]></category>
		<category><![CDATA[mac os vim]]></category>

		<guid isPermaLink="false">http://cssor.com/?p=1245</guid>
		<description><![CDATA[Mac下的vim/vi home目录为：/usr/share/vim. 切到该目 ...]]></description>
				<content:encoded><![CDATA[<p>Mac下的vim/vi home目录为：/usr/share/vim.<br />
切到该目录下，执行sudo vi vimrc ,加入我以前的配置内容，参见：<br />
<a href="https://raw.githubusercontent.com/tofishes/Vim/master/_vimrc" target="_blank">https://raw.githubusercontent.com/tofishes/Vim/master/_vimrc</a></p>
<p>然后切换目录到配色： cd vim73/colors</p>
<p>然后下载以前用的一个配色方案到该目录：</p>
<pre>
wget https://raw.githubusercontent.com/tofishes/Vim/master/vimfiles/colors/molokai.vim
</pre>
<p>至此就OK了。</p>
]]></content:encoded>
			<wfw:commentRss>http://cssor.com/mac-osx-vi-vim-colors.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>js getter setter和defineProperty兼容情况</title>
		<link>http://cssor.com/js-getter-setter-and-defineproperty.html</link>
		<comments>http://cssor.com/js-getter-setter-and-defineproperty.html#comments</comments>
		<pubDate>Wed, 17 Sep 2014 04:07:59 +0000</pubDate>
		<dc:creator><![CDATA[ToFishes]]></dc:creator>
				<category><![CDATA[JavaScript]]></category>

		<guid isPermaLink="false">http://cssor.com/?p=1242</guid>
		<description><![CDATA[测试数据源于： http://robertnyman.com/javascrip ...]]></description>
				<content:encoded><![CDATA[<p>测试数据源于： <a href="http://robertnyman.com/javascript/javascript-getters-setters.html" target="_blank">http://robertnyman.com/javascript/javascript-getters-setters.html</a></p>
<p>兼容ie9+及其他标准浏览器的写法有二：</p>
<p>1、</p>
<pre>
var lost = {
	loc : "Island",
	get location () {
		return this.loc;
	},
	set location(val) {
		this.loc = val;
	}
};
lost.location = "Another island";
</pre>
<p>2、</p>
<pre>
var lost = {
	loc : "Island"
};	
Object.defineProperty(lost, "location", {
	get : function () {
		return this.loc;
	},
	set : function (val) {
		this.loc = val;
	}
});
lost.location = "Another island";
</pre>
]]></content:encoded>
			<wfw:commentRss>http://cssor.com/js-getter-setter-and-defineproperty.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>YUI声明停止继续开发 &#8211; 一代“天骄”步入迟暮</title>
		<link>http://cssor.com/important-announcement-regarding-yui.html</link>
		<comments>http://cssor.com/important-announcement-regarding-yui.html#comments</comments>
		<pubDate>Thu, 11 Sep 2014 09:01:58 +0000</pubDate>
		<dc:creator><![CDATA[ToFishes]]></dc:creator>
				<category><![CDATA[自然]]></category>
		<category><![CDATA[yui]]></category>

		<guid isPermaLink="false">http://cssor.com/?p=1237</guid>
		<description><![CDATA[http://yahooeng.tumblr.com/post/96098168 ...]]></description>
				<content:encoded><![CDATA[<p><a href="http://yahooeng.tumblr.com/post/96098168666/important-announcement-regarding-yui" target="_blank">http://yahooeng.tumblr.com/post/96098168666/important-announcement-regarding-yui</a><br />
雅虎的工程师于8月29号声明：因为各类新技术，新js库的兴起（新东西层出不穷），浏览器将越来越标准化，像YUI这样大型的库已经越来越不被关注，社区也越来越不活跃，收到的issues也越来越少，所以我们做出一个艰难的决定，那就是 将停止继续开发YUI。<br />
而这个声明基本可以认为是YUI的生命终结了，因为随着时间流逝，YUI终将淘汰并成为历史。曾经辉煌的YUI看来是快要落幕了，真是缅怀啊！</p>
]]></content:encoded>
			<wfw:commentRss>http://cssor.com/important-announcement-regarding-yui.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>ToFishes系列jQuery插件 &#8211; Dropdown下拉列表</title>
		<link>http://cssor.com/tofishes-jquery-plugin-dropdown.html</link>
		<comments>http://cssor.com/tofishes-jquery-plugin-dropdown.html#comments</comments>
		<pubDate>Tue, 09 Sep 2014 09:20:29 +0000</pubDate>
		<dc:creator><![CDATA[ToFishes]]></dc:creator>
				<category><![CDATA[JavaScript]]></category>
		<category><![CDATA[jQuery]]></category>
		<category><![CDATA[dropdown]]></category>
		<category><![CDATA[jQuery插件]]></category>
		<category><![CDATA[下拉列表插件]]></category>

		<guid isPermaLink="false">http://cssor.com/?p=1233</guid>
		<description><![CDATA[之前有发过一套插件jcuteForm中包含一个下拉列表的实现，相比之前的作品，此 ...]]></description>
				<content:encoded><![CDATA[<p>之前有发过一套插件<a href="http://demo.cssor.com/jcuteform/" target="_blank">jcuteForm</a>中包含一个下拉列表的实现，相比之前的作品，此次的实现更加简洁和优雅（自认的）。</p>
<p>而以前的jCuteForm的demo页因为使用的Google jscdn 引入的jQuery挂了已经不能正常在线查看，不过还是可以下载的。</p>
<p>而这次的提升还是很不错的，需要的请自行：<a href="http://demo.cssor.com/dropdown/" title="tofishes系列jQuery插件Dropdown下拉列表" target="_blank">查看DEMO</a></p>
<p>源码里面有个注释，去掉就可以实现一个页面多个dropdown的显示互斥(点一个下拉，则其他打开的下拉就恢复原状，源码内的注释没解释清楚，恐误解)，因为莫名的想法我给注释掉了，需要的请自行取消。</p>
]]></content:encoded>
			<wfw:commentRss>http://cssor.com/tofishes-jquery-plugin-dropdown.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>jQuery表单方法糖serializeArray</title>
		<link>http://cssor.com/jquery-form-serializearray.html</link>
		<comments>http://cssor.com/jquery-form-serializearray.html#comments</comments>
		<pubDate>Mon, 01 Sep 2014 07:05:43 +0000</pubDate>
		<dc:creator><![CDATA[ToFishes]]></dc:creator>
				<category><![CDATA[JavaScript]]></category>
		<category><![CDATA[solution]]></category>
		<category><![CDATA[serializeArray]]></category>

		<guid isPermaLink="false">http://cssor.com/?p=1230</guid>
		<description><![CDATA[jQuery.serializeArray()和jQuery.param()两个 ...]]></description>
				<content:encoded><![CDATA[<p>jQuery.serializeArray()和jQuery.param()两个表单相关的方法不知道用的人多不多，这两个是获取表单参数的最方便方法。</p>
<p>serializeArray()返回的是一个数组，数组由简单的“名称-值对”对象组成，可以直接当做jQuery.ajax各api方法的data参数穿进去。</p>
<p>例如 </p>
<pre>
var params = $('form').serializeArray();// 返回类似： [{name: 'title', value: '标题'},  {name: 'content', value: '内容值'}]
$.post(url, params, function(){});
</pre>
<p>不过，在实际项目中可能有些变故，比如说我们项目后端要求 对同名参数的多个值是用逗号间隔合并一起的字符串，像checkbox类型，获取多个input[type=checkbox name="hobby"], 使用serailizeArray会返回这样的值：<br />
params = [{ name: "hobby", value: "one" }, { name: "hobby", value: "two" }, { name: "hobby", value: "three" }]</p>
<p>直接用于ajax方法，传参会是这样的： hobby=one&#038;hobby=two&#038;hobby=three<br />
而我们后端要求应该是这样传： hobby=one,two,three</p>
<p>因此直接使用serializeArray不能满足我们的需求，总不能放弃这么好的“方法糖”不吃吧？解决方法简单，我拿serializeArray封装一下，做了另外一个插件，满足了自己的需求，也没增加多少复杂度，具体代码如下：</p>
<pre>
// @tofishes
// var params = $('form').paramMap();  就可以获得整个表单的所有参数
$.fn.paramMap = function (opts) {
    opts = $.extend({
        'separator': ',' // 同名参数的分隔符，多用于checkbox的值
    })

    var params = this.serializeArray()
    ,   paramMap = {}

    ,   i = 0
    ,   l = params.length
    ,   param;

    for (; i < l; i++) {
        param = params[i];

        if (paramMap[param.name]) {
            paramMap[param.name] += opts.separator + param.value;
        } else {
            paramMap[param.name] = param.value;
        }
    };

    return paramMap;
};
</pre>
<p>善用方法，可以让自己的工作变简单很多。</p>
]]></content:encoded>
			<wfw:commentRss>http://cssor.com/jquery-form-serializearray.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>理解angular.js的作用域</title>
		<link>http://cssor.com/angular-js-understanding-scopes.html</link>
		<comments>http://cssor.com/angular-js-understanding-scopes.html#comments</comments>
		<pubDate>Fri, 29 Aug 2014 08:46:05 +0000</pubDate>
		<dc:creator><![CDATA[ToFishes]]></dc:creator>
				<category><![CDATA[JavaScript]]></category>
		<category><![CDATA[angular.js]]></category>

		<guid isPermaLink="false">http://cssor.com/?p=1228</guid>
		<description><![CDATA[传送门： https://github.com/angular/angular. ...]]></description>
				<content:encoded><![CDATA[<p>传送门：<a href="https://github.com/angular/angular.js/wiki/Understanding-Scopes" target="_blank"> https://github.com/angular/angular.js/wiki/Understanding-Scopes</a></p>
]]></content:encoded>
			<wfw:commentRss>http://cssor.com/angular-js-understanding-scopes.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
